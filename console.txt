addTab("Console", "https://img.icons8.com/ios-filled/256/ffffff/console.png", function(page)
    if not T.sf then T.sf = "ScrollingFrame" end
    
    local Colors = {
        primary = Color3.fromRGB(59, 130, 246),
        success = Color3.fromRGB(34, 197, 94),
        warning = Color3.fromRGB(251, 191, 36),
        error = Color3.fromRGB(239, 68, 68),
        background = Color3.fromRGB(17, 24, 39),
        surface = Color3.fromRGB(31, 41, 55),
        surfaceHover = Color3.fromRGB(55, 65, 81),
        text = Color3.fromRGB(243, 244, 246),
        textSecondary = Color3.fromRGB(156, 163, 175),
        border = Color3.fromRGB(75, 85, 99)
    }
    
    local headerFrame = x("fr", page, {
        bs = 0,
        bc = Colors.surface,
        bt = 1,
        sz = u(1, 0, 0.22, 0),
        ps = u(0, 0, 0, 0)
    })
    
    local headerPadding = Instance.new("UIPadding")
    headerPadding.PaddingLeft = D(0.04, 0)
    headerPadding.PaddingRight = D(0.04, 0)
    headerPadding.PaddingTop = D(0.03, 0)
    headerPadding.PaddingBottom = D(0.03, 0)
    headerPadding.Parent = headerFrame
    
    local headerLayout = Instance.new("UIListLayout")
    headerLayout.Parent = headerFrame
    headerLayout.FillDirection = Enum.FillDirection.Vertical
    headerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    headerLayout.SortOrder = Enum.SortOrder.LayoutOrder
    headerLayout.Padding = D(0.015, 0)
    
    local titleLabel = x("tl", headerFrame, {
        txw = true,
        tfx = E.lx,
        tfy = E.ly,
        txs = 32,
        ft = F(R..A.i, E.b, E.n),
        tc = Colors.text,
        bt = 1,
        sz = u(1, 0, 0.35, 0),
        tx = "üñ•Ô∏è Debug Console"
    })
    
    local descriptionLabel = x("tl", headerFrame, {
        txw = true,
        tfx = E.lx,
        tfy = E.ly,
        txs = 18,
        ft = F(R..A.i, E.r, E.n),
        tc = Colors.textSecondary,
        bt = 1,
        sz = u(1, 0, 0.25, 0),
        tx = "Monitor and filter application logs in real-time"
    })
    
    local controlsFrame = x("fr", headerFrame, {
        bs = 0,
        bc = Colors.surface,
        bt = 1,
        sz = u(1, 0, 0.4, 0)
    })
    
    local controlsLayout = Instance.new("UIListLayout")
    controlsLayout.Parent = controlsFrame
    controlsLayout.FillDirection = Enum.FillDirection.Horizontal
    controlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    controlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    controlsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    controlsLayout.Padding = D(0.025, 0)
    
    local function createStyledButton(parent, label, color, icon)
        local buttonContainer = x("fr", parent, {
            bs = 0,
            bc = color or Colors.surface,
            bt = 0,
            sz = u(0.2, 0, 0.85, 0)
        })
        
        x("uc", buttonContainer, {cr = D(0.25, 0)})
        x("us", buttonContainer, {ar = E.a, th = 2, Color = Colors.border})
        
        local buttonLayout = Instance.new("UIListLayout")
        buttonLayout.Parent = buttonContainer
        buttonLayout.FillDirection = Enum.FillDirection.Horizontal
        buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
        buttonLayout.Padding = D(0.02, 0)
        
        if icon then
            local iconLabel = x("tl", buttonContainer, {
                txw = true,
                tfx = Enum.TextXAlignment.Center,
                tfy = Enum.TextYAlignment.Center,
                txs = 16,
                ft = F(R..A.i, E.b, E.n),
                tc = Colors.text,
                bt = 1,
                sz = u(0, 20, 1, 0),
                tx = icon
            })
        end
        
        local buttonLabel = x("tl", buttonContainer, {
            txw = true,
            tfx = Enum.TextXAlignment.Center,
            tfy = Enum.TextYAlignment.Center,
            txs = 16,
            ft = F(R..A.i, E.s, E.n),
            tc = Colors.text,
            bt = 1,
            sz = u(1, icon and -25 or 0, 0.8, 0),
            tx = label
        })
        
        local clickButton = x("tb", buttonContainer, {
            bs = 0,
            bt = 1,
            sz = u(1, 0, 1, 0),
            tx = ""
        })
        
        x("uc", clickButton, {cr = D(0.25, 0)})
        
        return buttonContainer, clickButton, buttonLabel
    end
    
    local enabledButtonContainer, enabledButton, enabledLabel = createStyledButton(controlsFrame, "Enabled", Colors.success, "‚úì")
    local clearButtonContainer, clearButton, clearLabel = createStyledButton(controlsFrame, "Clear", Colors.surface, "üóëÔ∏è")
    local copyButtonContainer, copyButton, copyLabel = createStyledButton(controlsFrame, "Copy", Colors.surface, "üìã")
    
    local filtersFrame = x("fr", page, {
        bs = 0,
        bc = Colors.surface,
        bt = 0,
        sz = u(1, 0, 0.14, 0),
        ps = u(0, 0, 0.22, 0)
    })
    
    x("us", filtersFrame, {ar = E.a, th = 2, Color = Colors.border})
    
    local filtersPadding = Instance.new("UIPadding")
    filtersPadding.PaddingLeft = D(0.04, 0)
    filtersPadding.PaddingRight = D(0.04, 0)
    filtersPadding.PaddingTop = D(0.025, 0)
    filtersPadding.PaddingBottom = D(0.025, 0)
    filtersPadding.Parent = filtersFrame
    
    local filtersLayout = Instance.new("UIListLayout")
    filtersLayout.Parent = filtersFrame
    filtersLayout.FillDirection = Enum.FillDirection.Horizontal
    filtersLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    filtersLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    filtersLayout.SortOrder = Enum.SortOrder.LayoutOrder
    filtersLayout.Padding = D(0.035, 0)
    
    local function createFilterButton(parent, label, active, color, icon)
        local filterContainer = x("fr", parent, {
            bs = 0,
            bc = active and color or Colors.surface,
            bt = 0,
            sz = u(0.14, 0, 0.7, 0)
        })
        
        x("uc", filterContainer, {cr = D(0.3, 0)})
        x("us", filterContainer, {ar = E.a, th = 2, Color = active and color or Colors.border})
        
        local filterLayout = Instance.new("UIListLayout")
        filterLayout.Parent = filterContainer
        filterLayout.FillDirection = Enum.FillDirection.Horizontal
        filterLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        filterLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        filterLayout.SortOrder = Enum.SortOrder.LayoutOrder
        filterLayout.Padding = D(0.02, 0)
        
        if icon then
            local iconLabel = x("tl", filterContainer, {
                txw = true,
                tfx = Enum.TextXAlignment.Center,
                tfy = Enum.TextYAlignment.Center,
                txs = 14,
                ft = F(R..A.i, E.b, E.n),
                tc = Colors.text,
                bt = 1,
                sz = u(0, 18, 1, 0),
                tx = icon
            })
        end
        
        local filterLabel = x("tl", filterContainer, {
            txw = true,
            tfx = Enum.TextXAlignment.Center,
            tfy = Enum.TextYAlignment.Center,
            txs = 14,
            ft = F(R..A.i, E.s, E.n),
            tc = Colors.text,
            bt = 1,
            sz = u(1, icon and -23 or 0, 1, 0),
            tx = label
        })
        
        local filterButton = x("tb", filterContainer, {
            bs = 0,
            bt = 1,
            sz = u(1, 0, 1, 0),
            tx = ""
        })
        
        x("uc", filterButton, {cr = D(0.3, 0)})
        
        return filterContainer, filterButton, filterLabel
    end
    
    local printFilterContainer, printFilterButton, printFilterLabel = createFilterButton(filtersFrame, "PRINT", true, Colors.primary, "üìÑ")
    local warnFilterContainer, warnFilterButton, warnFilterLabel = createFilterButton(filtersFrame, "WARN", true, Colors.warning, "‚ö†Ô∏è")
    local errorFilterContainer, errorFilterButton, errorFilterLabel = createFilterButton(filtersFrame, "ERROR", true, Colors.error, "‚ùå")
    
    local limitLabel = x("tl", filtersFrame, {
        txw = true,
        tfx = E.lx,
        tfy = E.ly,
        txs = 14,
        ft = F(R..A.i, E.r, E.n),
        tc = Colors.textSecondary,
        bt = 1,
        sz = u(0.12, 0, 0.5, 0),
        tx = "üìä Limit:"
    })
    
    local limitTextBox = Instance.new("TextBox")
    limitTextBox.Parent = filtersFrame
    limitTextBox.BorderSizePixel = 0
    limitTextBox.BackgroundColor3 = Colors.surface
    limitTextBox.TextColor3 = Colors.text
    limitTextBox.TextSize = 14
    limitTextBox.FontFace = F(R..A.i, E.r, E.n)
    limitTextBox.Size = u(0.1, 0, 0.7, 0)
    limitTextBox.Text = "100"
    limitTextBox.TextXAlignment = Enum.TextXAlignment.Center
    limitTextBox.TextYAlignment = Enum.TextYAlignment.Center
    limitTextBox.PlaceholderText = "Max entries"
    limitTextBox.PlaceholderColor3 = Colors.textSecondary
    
    x("uc", limitTextBox, {cr = D(0.25, 0)})
    x("us", limitTextBox, {ar = E.a, th = 2, Color = Colors.border})
    
    local countLabel = x("tl", filtersFrame, {
        txw = true,
        tfx = E.lx,
        tfy = E.ly,
        txs = 14,
        ft = F(R..A.i, E.r, E.n),
        tc = Colors.textSecondary,
        bt = 1,
        sz = u(0.18, 0, 0.5, 0),
        tx = "üìà Count: 0"
    })
    
    local logScrollFrame = x("sf", page, {
        bs = 0,
        bc = Colors.background,
        bt = 1,
        sz = u(1, 0, 0.64, 0),
        ps = u(0, 0, 0.36, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        ScrollBarImageTransparency = 0.2
    })
    
    logScrollFrame.Active = true
    logScrollFrame.ScrollBarThickness = 12
    
    local logPadding = Instance.new("UIPadding")
    logPadding.PaddingLeft = D(0.025, 0)
    logPadding.PaddingRight = D(0.025, 0)
    logPadding.PaddingTop = D(0.025, 0)
    logPadding.PaddingBottom = D(0.025, 0)
    logPadding.Parent = logScrollFrame
    
    local logLayout = Instance.new("UIListLayout")
    logLayout.Parent = logScrollFrame
    logLayout.FillDirection = Enum.FillDirection.Vertical
    logLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    logLayout.SortOrder = Enum.SortOrder.LayoutOrder
    logLayout.Padding = D(0.015, 0)
    
    local maxEntries = 100
    local consoleEnabled = true
    local logEntries = {}
    local activeFilters = {print = true, warn = true, error = true}
    local clipboardFunction = setclipboard or toclipboard or (syn and syn.write_clipboard)
    
    local function updateEntryCount()
        countLabel.Text = "üìà Count: " .. #logEntries
    end
    
    local function isScrolledToBottom()
        local maxScrollY = math.max(0, logScrollFrame.AbsoluteCanvasSize.Y - logScrollFrame.AbsoluteSize.Y)
        return logScrollFrame.CanvasPosition.Y >= maxScrollY - 40
    end
    
    local shouldAutoScroll = false
    
    logScrollFrame:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        shouldAutoScroll = isScrolledToBottom()
    end)
    
    logScrollFrame:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(function()
        if shouldAutoScroll then
            logScrollFrame.CanvasPosition = Vector2.new(0, math.max(0, logScrollFrame.AbsoluteCanvasSize.Y - logScrollFrame.AbsoluteSize.Y))
        end
    end)
    
    local function detectLogType(message)
        local lowerMessage = message:lower()
        if message:match("^%[error%]") or message:match("^%[ERROR%]") or lowerMessage:find("error") then
            return "error"
        elseif message:match("^%[warn%]") or message:match("^%[WARN%]") or lowerMessage:find("warning") then
            return "warn"
        else
            return "print"
        end
    end
    
    local function cleanLogMessage(message)
        return message:gsub("^%[error%]%s*", ""):gsub("^%[ERROR%]%s*", ""):gsub("^%[print%]%s*", ""):gsub("^%[PRINT%]%s*", ""):gsub("^%[warn%]%s*", ""):gsub("^%[WARN%]%s*", "")
    end
    
    local function createLogEntry(text, logType)
        local cleanText = cleanLogMessage(text)
        local timestamp = os.date("%H:%M:%S")
        
        local entryFrame = x("fr", logScrollFrame, {
            bs = 0,
            bc = Colors.surface,
            bt = 0,
            sz = u(1, 0, 0.1, 0),
            v = activeFilters[logType]
        })
        
        x("uc", entryFrame, {cr = D(0.2, 0)})
        x("us", entryFrame, {ar = E.a, th = 1, Color = Colors.border})
        
        local entryPadding = Instance.new("UIPadding")
        entryPadding.PaddingLeft = D(0.02, 0)
        entryPadding.PaddingRight = D(0.02, 0)
        entryPadding.PaddingTop = D(0.015, 0)
        entryPadding.PaddingBottom = D(0.015, 0)
        entryPadding.Parent = entryFrame
        
        local entryLayout = Instance.new("UIListLayout")
        entryLayout.Parent = entryFrame
        entryLayout.FillDirection = Enum.FillDirection.Horizontal
        entryLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        entryLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        entryLayout.SortOrder = Enum.SortOrder.LayoutOrder
        entryLayout.Padding = D(0.02, 0)
        
        local typeIcon = logType == "error" and "‚ùå" or logType == "warn" and "‚ö†Ô∏è" or "üìÑ"
        local typeColor = logType == "error" and Colors.error or logType == "warn" and Colors.warning or Colors.primary
        
        local iconLabel = x("tl", entryFrame, {
            txw = true,
            tfx = Enum.TextXAlignment.Center,
            tfy = Enum.TextYAlignment.Center,
            txs = 16,
            ft = F(R..A.i, E.b, E.n),
            tc = Colors.text,
            bt = 1,
            sz = u(0, 25, 1, 0),
            tx = typeIcon
        })
        
        local timestampLabel = x("tl", entryFrame, {
            txw = true,
            tfx = E.lx,
            tfy = E.ly,
            txs = 12,
            ft = F(R..A.i, E.r, E.n),
            tc = Colors.textSecondary,
            bt = 1,
            sz = u(0.15, 0, 0.5, 0),
            tx = "üïê " .. timestamp
        })
        
        local typeLabel = x("tl", entryFrame, {
            txw = true,
            tfx = E.lx,
            tfy = E.ly,
            txs = 12,
            ft = F(R..A.i, E.b, E.n),
            tc = typeColor,
            bt = 1,
            sz = u(0.12, 0, 0.5, 0),
            tx = logType:upper()
        })
        
        local messageLabel = x("tl", entryFrame, {
            txw = true,
            tfx = E.lx,
            tfy = E.ly,
            txs = 14,
            ft = F(R..A.i, E.r, E.n),
            tc = Colors.text,
            bt = 1,
            sz = u(0.68, 0, 0.9, 0),
            tx = cleanText
        })
        
        local clickArea = x("tb", entryFrame, {
            bs = 0,
            bt = 1,
            sz = u(1, 0, 1, 0),
            tx = ""
        })
        
        x("uc", clickArea, {cr = D(0.2, 0)})
        
        y(clickArea, function()
            if clipboardFunction then
                pcall(function()
                    clipboardFunction(cleanText)
                end)
            end
        end)
        
        return entryFrame, logType
    end
    
    local function addLogEntry(logType, message)
        if not consoleEnabled then return end
        
        local detectedType = detectLogType(message)
        local entryNode, nodeType = createLogEntry(message, detectedType)
        
        logEntries[#logEntries + 1] = {
            message = message,
            node = entryNode,
            type = nodeType,
            fullText = "[" .. detectedType:upper() .. "] " .. os.date("%H:%M:%S") .. " " .. cleanLogMessage(message)
        }
        
        while #logEntries > maxEntries do
            local firstEntry = table.remove(logEntries, 1)
            if firstEntry and firstEntry.node then
                firstEntry.node:Destroy()
            end
        end
        
        updateEntryCount()
        
        if shouldAutoScroll then
            logScrollFrame.CanvasPosition = Vector2.new(0, math.max(0, logScrollFrame.AbsoluteCanvasSize.Y - logScrollFrame.AbsoluteSize.Y))
        end
    end
    
    local function updateFilterVisibility()
        for _, entry in ipairs(logEntries) do
            if entry.node then
                entry.node.Visible = activeFilters[entry.type]
            end
        end
    end
    
    y(enabledButton, function()
        consoleEnabled = not consoleEnabled
        enabledLabel.Text = consoleEnabled and "Enabled" or "Disabled"
        enabledButtonContainer.BackgroundColor3 = consoleEnabled and Colors.success or Colors.surface
    end)
    
    y(clearButton, function()
        for i = #logEntries, 1, -1 do
            local entry = logEntries[i]
            if entry.node then
                entry.node:Destroy()
            end
            logEntries[i] = nil
        end
        updateEntryCount()
    end)
    
    y(copyButton, function()
        local allText = {}
        for i = 1, #logEntries do
            allText[i] = logEntries[i].fullText
        end
        local combinedText = table.concat(allText, "\n")
        if clipboardFunction and #combinedText > 0 then
            pcall(function()
                clipboardFunction(combinedText)
            end)
        end
    end)
    
    y(printFilterButton, function()
        activeFilters.print = not activeFilters.print
        printFilterContainer.BackgroundColor3 = activeFilters.print and Colors.primary or Colors.surface
        updateFilterVisibility()
    end)
    
    y(warnFilterButton, function()
        activeFilters.warn = not activeFilters.warn
        warnFilterContainer.BackgroundColor3 = activeFilters.warn and Colors.warning or Colors.surface
        updateFilterVisibility()
    end)
    
    y(errorFilterButton, function()
        activeFilters.error = not activeFilters.error
        errorFilterContainer.BackgroundColor3 = activeFilters.error and Colors.error or Colors.surface
        updateFilterVisibility()
    end)
    
    limitTextBox:GetPropertyChangedSignal("Text"):Connect(function()
        local newLimit = tonumber(limitTextBox.Text)
        if newLimit and newLimit > 0 and newLimit <= 1000 then
            maxEntries = newLimit
            while #logEntries > maxEntries do
                local firstEntry = table.remove(logEntries, 1)
                if firstEntry and firstEntry.node then
                    firstEntry.node:Destroy()
                end
            end
            updateEntryCount()
        end
    end)
    
    local LogService = G.LogService
    LogService.MessageOut:Connect(function(message, messageType)
        local logType = "print"
        if messageType == Enum.MessageType.MessageWarning then
            logType = "warn"
        elseif messageType == Enum.MessageType.MessageError then
            logType = "error"
        end
        addLogEntry(logType, message)
    end)
    
    updateEntryCount()
end)
